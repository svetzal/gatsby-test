<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.2.3" created="2019-09-08 19:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Agile Technical Practices Coaching and Training</title>
	<link>https://codingculture.io</link>
	<description>Value Driven Coaching for Software Teams</description>
	<pubDate>Sun, 08 Sep 2019 19:15:50 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://codingculture.io</wp:base_site_url>
	<wp:base_blog_url>https://codingculture.io</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[svetzal]]></wp:author_login><wp:author_email><![CDATA[stacey@mojility.ca]]></wp:author_email><wp:author_display_name><![CDATA[svetzal]]></wp:author_display_name><wp:author_first_name><![CDATA[Stacey]]></wp:author_first_name><wp:author_last_name><![CDATA[Vetzal]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=5.2.3</generator>

<image>
	<url>https://codingculture.io/wp-content/uploads/2017/04/cropped-Logo-32x32.png</url>
	<title>Agile Technical Practices Coaching and Training</title>
	<link>https://codingculture.io</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>Lies, Damned Lies, and Code Comments</title>
		<link>https://codingculture.io/2015/02/03/code-comments/</link>
		<pubDate>Tue, 03 Feb 2015 16:54:58 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://devbestpractices.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[Your project is lying to you.

That comment that someone wrote way back over that block of code? Yeah, it was relevant a year ago. Today, it's definitely a lie. Probably a damned lie. Maybe worse.

It's definitely worse if that comment regurgitates what the code probably used to do, and now looking at the new code it's obvious it's lying to you. It's way worse if you actually took that comment at face value, allowing it to deceive you for a time.

Or maybe you don't understand the code as well as you think. Let's take a few minutes and pick it apart. Minutes you didn't account for, but, how bad could it be?

And, look, there, it's hinting at maybe why it was written that way last year, but the business no longer depends on that, so not only is it lying to you about what the code is doing, but it's also lying to you about why it's doing it.

Stop it.

<ol>
<li>If you see a comment that lies, fix it or delete it. Immediately. If you leave that there, it <em>will</em> do harm, and that harm will be <em>your</em> responsibility.</p></li>
<li><p>If you've found the <a href="https://codingculture.io/wp-content/uploads/2015/02/the-chaos-in-the-matryoshka">Chaos in the Matryoshka</a>, use code comments to explain <em>why</em> the code looks as twisted as it does. Clearly. Concisely. Don't use expletives.</p></li>
<li><p>If you feel you need to write a comment to explain <em>what</em> the code is doing, refactor the code so that it is clear. That's bad code. Fix it. Immediately.</p></li>
</ol>

<p>"But but but... I didn't add that time to my estimate!"

Then you estimated poorly, didn't you. Do better next time.

The code you are looking at is your responsibility. Not your managers. Not your CEOs. Yours. You are the professional on the job. Own it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2015-02-03 16:54:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-03 16:54:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[code-comments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[code comments]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Code comments lie. Oh, maybe not right away, but the journey to wicked code is paved with good intentions.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[84]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Wicked Code</title>
		<link>https://codingculture.io/2015/03/19/wicked-code/</link>
		<pubDate>Thu, 19 Mar 2015 16:30:03 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://devbestpractices.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[There is a particular class of problem, a <a href="https://codingculture.io/wp-content/uploads/2015/03/Wicked_problem" target="_blank">Wicked Problem</a>, that denies solution.

These problems are difficult or impossible to solve due to their complexity, a shifting or evolving context, and that's if you can even find and identify them.

[caption id="attachment_47" align="alignright" width="150"]<img class="wp-image-47 size-thumbnail" src="https://codingculture.io/wp-content/uploads/2015/03/I-do-not-think-it-means-what-you-think-it-means-150x1501.jpeg" alt="Inigo Montoya: Wicked Code killed his father, craftsmanship will avenge!" width="150" height="150" /> Inigo Montoya: Wicked Code killed his father, craftsmanship will avenge![/caption]

Wicked Code is similar. Where Wicked Problems deny solutions, Wicked Code denies understanding.

The code might be misleading, with stale deceptive comments, or inappropriately named variables or functions. It might have such poor cohesion that it's hard to find all the code that relates to an idea or function. Or it might be so tightly coupled that every change you make causes an avalanche of successive change.

I wish more developers practiced the <a href="https://codingculture.io/wp-content/uploads/2015/03/wiki?PrincipleOfLeastAstonishment">Principle of Least Astonishment</a>, and they might if they realized that they may only be astonishing their future selves.

Measuring your team's adherence to the Principle of Least Astonishment is easy - just follow the WTF's per hour metric. How many times an hour does someone on your team pause, staring blankly at their monitor, and mutter, maybe quietly, maybe loudly, "What The Absolute F!!!???"

Anybody who's spent any amount of time in this field has lived with Wicked Code and tried to refactor it into submission. Once it's gotten a foot-hold, it's hard to shake. You might be familiar with the pattern: fork, try to fix, delete fork, repeat.

Wicked Code is curbed by good craftsmanship. Careful attention to how you express intent in your code. Careful naming. Be mindful of how you're practicing disciplines and principles like the Principle of Least Astonishment.

As a software craftsman, it's your duty to keep Wicked Code under control, lest you or your team fall into it's spiral.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2015-03-19 16:30:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-19 16:30:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wicked-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[craftsmanship]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Wicked Code | Software Craftsmanship]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Like wicked problems deny solutions, wicked code denies understanding. Craftsmanship is key to staying out of its spiral.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://devbestpractices.com/wp-content/uploads/2015/03/I-do-not-think-it-means-what-you-think-it-means.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://devbestpractices.com/wp-content/uploads/2015/03/I-do-not-think-it-means-what-you-think-it-means.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image-id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[DRAFT] The &apos;No Code&apos; Constraint</title>
		<link>https://codingculture.io/?p=60</link>
		<pubDate>17 Apr 2015 11:17:04 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[When you've done a code kata many times, it helps to find new ways to increase the level of difficulty of the kata. We often introduce constraints, like no method greater than 3 lines of code, no primitive function arguments, no touching the mouse, etc.

I recently realized a new constraint I introduce to teams who have trouble introducing abstractions to their code.

I'm calling it the "No Code", or Interfaces Only constraint.

The purpose is to help people think through problems on a conceptual level, rather than with data. To help them think through procedures more abstractly.

The constraint has two variants, depending on if you're working in a dynamic or a statically typed language.&nbsp;For languages like C++/C#/Java/PHP the Interfaces Only approach looks like this:
<ul>
	<li>You may ONLY define interfaces, traits, and abstract classes.</li>
	<li>If you want to AT THE END, you can add concrete classes that conform to your interfaces and see if your solution can run.</li>
</ul>
For dynamic languages like Ruby/Python/Perl:
<ul>
	<li>You may ONLY define modules/namespaces, classes and methods</li>
	<li>You may fill in method bodies ONLY with calls to other methods</li>
	<li>You may NOT put code in those methods that manipulates data
<ul>
	<li>If you want to at the end, to affirm&nbsp;your design, you may do this, but not during the initial design process</li>
</ul>
</li>
	<li>With no code in the methods, there is no pressure to declare object properties or variables</li>
</ul>
Notice how PHP is a dynamic language, but will enforce Interface semantics, so it fits this kata to be treated as a statically typed language.

To see how this might apply to a kata like FizzBuzz, consider the following PHP code:
<pre class="theme:twilight lang:php decode:true ">class MyClass {
  function doSomething() {
    echo "Hello!\n";
  }
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 11:17:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-17 11:17:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Technical Debt and The Big Rewrite</title>
		<link>https://codingculture.io/2015/07/17/technical-debt-and-the-big-rewrite/</link>
		<pubDate>Fri, 17 Jul 2015 03:29:48 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<header class="entry-header">
<p class="entry-title">It is so easy to sweep things under the rug.</p>

</header>
<div class="entry-content">

I’ll fix that comment later. One day, I’ll need to refactor this. Oooo this code is stinky, no time right now. No time right now. Just wish I had time. No time for this.

And then, kaboom.

You find yourself sitting there, in a pile of wicked code, wondering how it got that bad. You’re a good developer, how could you let this happen?

Let’s ask management for some budget to refactor things. Better yet, let’s rewrite it. We can do way better next time around.

STOP RIGHT THERE

You <strong>won’t do better</strong> next time around until you fix the very first problem – “I’ll fix that later.”

Every time you do that, you’re increasing technical debt, on a credit line where you probably don’t know the limit, but there is one, and one day you’ll find yourself bouncing promises like so many rubber cheques because you’ve run out of headroom.

How did the code get wicked? Don’t even try to shift the blame onto the code. You held its hand through every. single. bad. decision. one. day. at. a. time. And now you look at the poor thing like so much rotten fruit?

Oh, but you’re not the only person on the team, you say? It’s not your code that’s the worst, you say? You aspire to not be the <em>worst</em> person on the team? Maybe you should set your sights a little higher.

The big rewrite is declaring bankruptcy. It is saying, we give up. We can’t possibly repay this, or fix it. But please trust us one more time, we’ll do better! We promise!

When you declare bankruptcy in the real world, you are legally forced to take a time-out. You’re liquidated. The black mark sits on your credit bureau for years. You struggle for forgiveness in the financial world.

I think the same should be true of software developers. Think about that. What if when you give up on your code and suggest a re-write you have to go get a McJob for 7 years before you get to be a software developer again. Would you still suggest that re-write?

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2015-07-17 03:29:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-17 03:29:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[technical-debt-and-the-big-rewrite]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[technical debt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[technical debt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[69]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Avoid Technical Debt with Planning</title>
		<link>https://codingculture.io/2015/07/18/avoid-technical-debt-with-planning/</link>
		<pubDate>Sat, 18 Jul 2015 03:32:07 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<header class="entry-header">
<p class="entry-title">So, you get it. Technical debt is bad. So what do you do about it when you have it?</p>

</header>
<div class="entry-content">

First step is probably to try and avoid digging yourself deeper.

One of the most misunderstood things about agile practices is planning. For some reason, people sometimes take to the extremes and throw planning out the window. It is just as silly as it sounds. Our challenge is not to code without planning, it is about how much planning we actually need, and how closely do we follow a plan when we learn how it doesn’t exactly fit.

We learn what <em>truly</em> needs to be done, by doing the work.

The art is in the rough plan, and letting your technical practices guide you through it.

If you can plan a bit, you might be able to see some rough patches ahead. Having strategized around them once, you’ll be far better prepared when you’re neck deep in them for making better decisions in the moment.

It can be almost like you’re practicing planning the first time. The value in what you are doing is not necessarily in that rough document or summary you produce, <em>but rather the value comes from the act of producing it.</em>

Think about that. It’s kinda “meta”. The value you get from planning, is in the conversations, with the right people at the table, as you all talk about what you need from this thing you’re building. You’ve all gotten into a room, unscrewed the tops of your heads, dumped your thoughts all over the table, and rummaged through them trying to come up with a plan.

It’s not like you forget about everything that wasn’t the chosen plan when you leave the room.

Planning is a tool you can use to avoid accumulating technical debt to begin with. It’s not the only tool. It’s not a perfect tool. It’s just a tool, and you can use it.

And understanding that the value lay in your planning session makes it easier to let go of that plan that doesn’t quite fit when it’s time.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2015-07-18 03:32:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-18 03:32:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[avoid-technical-debt-with-planning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[technical debt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[technical debt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[79]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Lightweight Accountability</title>
		<link>https://codingculture.io/2015/12/22/lightweight-accountability/</link>
		<pubDate>Tue, 22 Dec 2015 16:11:51 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[If you require project accountability to funders, for grants or tax refunds, you need lightweight processes that integrate with your development practices, not some weird offshoot extra step you'll never do or that duplicates efforts you've already made elsewhere.

Let's start at the very bottom.

If you're not using source-control for your start-up software project, you're failing at the outset. It's hard to enumerate all of the ways in which source-control systems help, it's a long list. I know you likely didn't learn it in college, or even if you did, you weren't taught much about it, but their failing doesn't have to be yours. Learn a tool like git, use good commit messages, make it part of your day-to-day development workflow. Commit early, commit often.

For the past 15 years I've used source-control systems for accountability. Every change, to every file, documented. Areas of our source code eligible for SR&amp;ED? Good commit messages and constant committing to your repository part of your practice? Git log that folder, instant audit trail, what was done, when it was done, how much time was spent.

Need higher-level overview? What project tracking system do you use?

Trello? Pivotal Tracker? JIRA? Anyone suggests GANTT charts or MS Project, run away. They don't understand software projects.

If you use your project tracking system as you should, you'll have an auditable trail of every story, at every stage. Tag the stories that touch upon experiments. A good project system provides a instant clean visualization of exactly where you're at to all stakeholders who care. Better tools even provide timeline estimation assistance. Focus any status meetings you can't defer around your project tool, make sure the language you use in it reflects the language they use.

Use Slack for team communications? Plug in the project management and source-control tracking integrations. One slack channel, all changes, fully auditable. No overhead.

The point here isn't to add additional overhead to your processes, it's to use processes and tools that provide auditability naturally, in addition to their core function. Need to document experiments in your code-base? Use branching in your source-control for each experiment. Need to identify the amount of time spent? Use the timestamps in the branch logs.

Technical practices discipline can help in many ways, especially in accountability, and they need not be hard, nor cumbersome, and you'll reap the benefits in more ways than you can count.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2015-12-22 16:11:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-22 16:11:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lightweight-accountability]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[accountability]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[accountability]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[79]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[DRAFT] Scoping and Estimating Projects</title>
		<link>https://codingculture.io/?p=92</link>
		<pubDate>Thu, 17 Mar 2016 13:19:27 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp; &nbsp; I had an exchange with a colleague last night, and it really pushed me back into this gear. Realizing I haven't published these kinds of thoughts on Codemanship.ca, and indeed it's been a while since I've written about this topic, I figured it was time to write down my current thinking.

Colleague: [discussing potential project, a "quote" from a developer who became unavailable]

Me: "I don't do quotes anyways... I haven't done fixed cost fixed scope projects in a long time. IMO it's what's driven the custom software industry to hell, it's a road paved with broken promises and naive expectations

Colleague: "So when you take on new work how do you give an expectation of budget?"

Me: "An educated guess based on past experience, a development process that ensures business value is front end loaded, and helping them understand how to make decisions without the crutch of a comfortable lie."

So I'm going to unpack this exchange a little. I often get pushback when I'm bidding on work from web development companies that don't get into a lot of work that I'll characterize as "hard development" (not that what they do isn't hard, it's just different), and it always falls in this direction. If I won't commit to a budget and scope, how can they cost it out, and then how can they win the business?

Now, let's set aside a couple things in the lens of the web designer - first that the web design industry is fairly commoditized. Web design projects typically have a well established concept of "finished", and the market has a lot of churn, arguably acceptable churn, where organizations will regularly toss out a design and build a new one, often with a different designer.

My first point is that custom software development takes a lot more effort than people like to believe. If people believe it's less work than it actually is, then they're less inclined to pay for the work that actually needs to be done. Developers will often fall prey to false optimism when estimating, potential clients with no prior experience commissioning custom development work always seem shocked at the effort and costs, and this puts further downward pressure on estimates.

Combine that with the research that indicates estimates are easily biased through suggestion and wording, and you begin to see the recipe for disaster.

My second point is that software is never finished. It's convenient to think of a project as something you might declare "done" one day. Ask Microsoft if Word is done. Ask anyone if the software they use every day to run their business is "done". This word sounds authoritative doesn't it? It's done! Well, until you find a misunderstanding codified within it, or a deficiency that the business didn't think of when they "scoped" it, or a genuine mistake made by a developer, or a new operating system or browser or other technology that it won't work with, or evolving user expectations around user interface design, or or or or.
You might think it's as easy as reading and understanding a scope document, but let's point out the challenges usually awaiting you there...
<ul>
	<li>scope documents written in varying conditions, by people with varying understanding of the work that needs doing</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2016-03-17 13:19:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-17 13:19:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scoping-and-estimating-projects]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Why Kata?</title>
		<link>https://codingculture.io/2016/04/15/why-kata/</link>
		<pubDate>Fri, 15 Apr 2016 11:08:09 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[In 2011, Daniel Kahneman launched a book called Thinking Fast and Slow. It summarized decades of research and presented one core thesis.

Within our brains is two "systems" - "System 1" is fast, pattern-matching, driven by instinct and past experience, emotionally driven. "System 2" is slow, reasoning, deliberate, logical.

As a species, we have evolved and honed these two systems. System 1 gets us out of danger, fast. Some folks like to call it the Lizard Brain.

System 2 represents all that is civilized about mankind. Governance. Scientific research. Philosophy.

Most of the time, we are teaching System 2 how to code. We work through problems, learn a programming language's syntax and ecosystem, learn techniques and patterns.

We would like to do all our coding with System 2 primarily engaged.

But then life takes over. Crisis hits. Deadlines loom. Pressure builds.

System 1 takes over, and unless you've taught it SOMETHING about coding, wicked code starts shooting out your fingers. Quick hack. Monkeypatch here. Rushed commit there. Kaboom, things get worse.

You can't teach System 1 how to code by reading books, taking courses, building new things all the time.

You teach System 1 with kata.

You do the same exercises, over and over, teaching your Lizard Brain the muscle patterns, through repetition, the right way, the way you want to code.

What have you taught your System 1 about writing software?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2016-04-15 11:08:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-15 11:08:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[why-kata]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[kata]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[kata]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Code kata exercises help teach your "system 1", the pattern matching side of your brain. Build its instincts and remove that overhead from your "system 2".]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[66]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[DRAFT] Specialize or Generalize?</title>
		<link>https://codingculture.io/?p=121</link>
		<pubDate>Thu, 1 Sep 2016 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[I've seen some thoughts floating around today around what kind of mix of generalists or specialists should you have on an agile team. It started when I saw a tweet out from @GregerWikstrand on the topic and it got me thinking. I'm afraid of generalists. And specialists. Why?

I'm afraid of specialists because their world view is so narrow. In the words of one of my favourite science fiction writers growing up (Robert A Heinlein) "Specialization is for insects."

If I'm a specialist in Java, I have very little exposure to what's possible in a dynamic programming language. Or a functional programming language. Or a language that compiles to machine code. I started my career with BASIC, then C, then C++, then Perl, then Java, then JavaScript, then C#, then Ruby, then Objective C, then Swift, now I'm learning Elixir. Each language I learned taught me to solve problems in different ways, and now I can wield all of them with greater skill.

Does this make me a generalist (in programming languages)? I certainly didn't specialize, or perhaps I specialized in many things for periods of 3-10 years. Most of those languages I've learned with some depth, whether exploring the nuance of concurrent development in Java, or meta-programming in Ruby. I'm pretty embarrassed to look at past code I've written in any language, but the further back I go, the further I see what I lacked at the time.

On the other side are generalists, to me a bit more scary than specialists. Why? Consider the original 5-stage Dreyfus skills acquisition model:

Novice &lt; Advanced Beginner &lt; Competent &lt; Proficient &lt; Expert

If, as a generalist you truly believe you can google your way to expert overnight on a topic, you're probably sitting at the Advanced Beginner stage. That stage where you've learned some rules of the domain, thought "Hey, this isn't so hard..." and are ready to jump in head first.

Personally I relish this stage, because it means when I make that jump in, I'm a short distance from competent after I blunder my way around for a while. Then the feeling sets in that "there's more here than I thought". Then I hit proficient. Then "holy crap how did I ever accomplish anything with this stuff in the past, I was such a fool!" And "I'll never learn all of this if I live to be 100" as I curve through Expert.

I know I'm no expert when I'm diving in, and I think this is where ethics comes to play.

When I started my first software consultancy 14 years ago, I thought I knew how everything needed to be done. I was drunk off of the Agile Manifesto, and heading in to entrepreneurship without a freaking clue about running a business. I talked to every customer, and for every customer I was the solution to all their problems. I could do anything. I've seen this in a lot of small companies over the years, a reluctance to turn away business coupled with a "our dev is amazing and rules the world" attitude, with some poor 20-something soul barely out of school bright eyed and eager to take on everything.

Ahh experience. You're a bastard of a teacher.

I loved being that person. It was exhilarating. I leaped into J2EE and began building behemoth apps like I could tame the mountain of work on my own. I built a product, it worked well, but damn it was easy to fall behind, and in the end, I lacked the time required to keep it relevant. I needed a team, but I hadn't built a business to support a team. I discontinued the product 10 years ago and resigned myself to running a gun-for-hire consultancy shop.

Selling custom software services in a competitive market, you had to shine up the story of your team to blinding brilliance. It wasn't too hard for me to do, I had built a good team, a group of folks who got along, were competent and hungry for learning, and I fed that desire, eventually learning to bounce the technology mix around to strategic places (or, more often than not, letting them do that). It took some effort to pull myself away from the comfy Java blanket, but wow was it worth it.

But staring out at competitors all in their shining armour façades, I was dismayed. Finding work wasn't enough, it had to be good work that you could actually show the world. At our 10 year anniversary party a local MP was determined to find out what we did, and the guys bound by NDAs held their secrets well, to the MPs frustration. It was very hard to differentiate in a market full of "yes, we can do everything too."

This team we had, were what I'd call multiple-disciplinary specialists.

One was extremely competent at the kind of mental gyrations needed to make a database sing. Poor guy wrote pages-long SQL queries dealing with ridiculously broken customer data. An insatiable appetite for new things, inspired us to centralize on Gentoo Linux, was the core driver away from Java Seam into Rails. Frustrated by the rest of the team's difficulty in keeping pace.

Another deep dove into the Microsoft stack. Picked up Rails on the side, ripped through Silverlight, and became a tremendous C++ developer. When he first started with us, I was so amazed by his ability to context switch I tried overloading him. Didn't work. He is also a tremendously compassionate person with great empathy which drove success for the client projects he took on.

I'd dug into ops, which became devops, and the three of us provided leadership to a growing band of interns and apprentices. We delivered some great projects.

I wouldn't call any of the three of us generalists. And we couldn't have functioned unless we'd each developed deep skill in a number of key areas. We certainly weren't afraid to tackle new areas.

So what were we? Why did we do so well as a team for so many years? Were we a collection of specialists?

I think we were neither, and both, and that's what held it together.

Which leads me to think that these two categories are maybe not directly relevant to the success of an agile team.

I don't want a team full of Advanced Beginners. There's some truth to the adage "knows enough to be dangerous."

I don't want a team full of specialists. When your scope is so narrow, communication outside your field becomes a challenge. Software projects are hard enough without layering on more communications challenges. Besides, I know the depth to which they can specialize is limited, because they tend to lack greater / other contexts.

I want a team of folks with varying experience, deep and shallow, like when you take a few panels with holes in different places, and put them together, you have a solid panel that won't leak. The team, stronger together. Mix computer science and engineering folks, mix senior and junior developers, mix in testers, business analysts. Put people together who celebrate their differences, knowledge, culture or heritage, gender, age.

You may have some trouble if you're not careful around prejudice, misogyny, agism, homophobia or transphobia, racism. These things will be obvious with the right cultural tone, and you'll have to deal with them.

But watch them solve problems! A team like that will innovate like you've never seen. Once I figured out how to, this completely fed our ability to leverage tax refunds for experimental development efforts. All because the solutions they wanted to build were unique, interesting, and challenging.

<em>Three Wise Men Inc, the custom software consultancy Stacey built had 10 people at their peak, and delivered about $5M worth of projects to a wide array of businesses in the GTA between 2002 and 2014.</em>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2016-09-01 00:54:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Testing Against The Edges</title>
		<link>https://codingculture.io/2017/01/25/against-the-edges/</link>
		<pubDate>Wed, 25 Jan 2017 12:04:35 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[I have found a new thing.

A test culture so pervasive and intrinsic that they want to test <strong>everything</strong>.

So much so that they have chosen an implementation path that avoids as much coupling as possible to their third-party framework, and even restricts how they use that third party framework.

We hit an implementation challenge where they need to use the framework differently, in a way that forces them to want to mock the framework to build their tests. And now they're pushing back against an industry accepted pattern because they don't know how to test it.

They've finally hit that boundary they've dodged and weaved around for so long.

There's a mantra we sometimes use in test-driven development, "don't mock what you don't own". It's a useful check to see if you've hit a third-party boundary like this.

So if you can't mock what you don't own, what do you do?

You make your contact with that boundary as thin as possible. That's what you do. Refactor that out until it's paper thin. And here's the kicker.

Don't test it.

Yup, that's right. What's the incremental value in achieving test coverage on that boundary? I'd tend to bet it's pretty low. If it's not, I bet you have more to extract from that interfacing.

You might be tempted to implement some vendor-specific harnessing to achieve testing of that boundary. Sure you can adopt that, but same rules apply. It's another boundary to a third-party system - make it as absolutely thin as you can.

The reality these days, especially if you have contact in the chaos that is Javascript development, is that this world moves damn fast. That vendor needs to  update their framework to maintain their income stream, or "to stay current", or "because the new maintainer has a different vision", or for whatever reason.

When that vendor layer changes, or you change vendors, you want to deal with as thin a spill to clean up as possible.

Whether you follow "don't mock what you don't own" or not, watch those boundaries, and don't fall off the edge.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2017-01-25 12:04:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-25 12:04:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[against-the-edges]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[128]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[By taking care testing your boundary edges, minimizing code in contact with them, you can achieve a well tested system resilient to change.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[testing]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[testing]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[77]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[DRAFT] Emergent Design: Refactoring and the Stable Dependencies Principle</title>
		<link>https://codingculture.io/?p=132</link>
		<pubDate>Sat, 4 Feb 2017 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[The Stable Dependencies Principle (link on C2 - wiki.c2.com/?StableDependenciesPrinciple) is often expressed as a principle applying between modules.

Sometimes language fails us, and sometimes it's hard to understand when this might apply to code we're writing. Is a module a class? A function? A NuGet / NPM / JAR / GEM / EGG / etc?

The idea is simple - try not to depend on things that change too often, because you'll likely have to change with them. This is the key principle when disassembling a project that has become "large" (for whatever definition of large happens to suit you at the moment).

One of the core tenets of agile software development, is the idea that when we begin down a path, we know the least about where it will take us. We often start with fuzzy or missing requirements, loose definitions of what "done" might one day look like. Step by step we code software towards that goal. Claiming that we know what the shape of the software should be at the outset seems a fools errand.

Mary and Tom Poppendieck brought us the idea of the Last Responsible Moment. The idea that deferring decisions in the development of a system until we have gathered more information will serve us well. There will come a time at which further deference of that decision will cause harm, and that time is described as the Last Responsible Moment.

Think about decisions you make as you code. Should I extract an interface now or later? Is this one class or two? Do I see some groupings I can make around responsibilities in this system I see emerging in front of me?

Refactoring code can be time consuming without appropriate tools support. A strong IDE with refactoring features will help you keep your sanity while exploring this path. None of them are perfect, but we are slowly progressing towards better and better systems. Just remember, you are expected to deliver software today.

Some of the first concepts like extracting a variable or object property, extracting a method, extracting a class, these let you take a piece of code and gently lift apart concerns. Writing small methods let you build up classes that might begin to exhibit signs of multiple responsibilities. As you separate classes you start to explore along the edges of the stable dependencies principle.

As your classes begin to depend on each other, pay attention to what depends on what. Look at your source-code stats on how much things have changed in a class throughout your project (act on fact, not conjecture).&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2017-02-04 21:48:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Act on Fact, Not Conjecture</title>
		<link>https://codingculture.io/2017/02/04/act-on-fact-not-conjecture/</link>
		<pubDate>Sat, 04 Feb 2017 22:27:26 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">http://codemanship.ca/2017/02/04/act-on-fact-not-conjecture/</guid>
		<description></description>
		<content:encoded><![CDATA[So, how much of a part do your feelings play in how you write software?

Feelings are important. Feelings are your "spidey sense", your "System 1" or "lizard" brain telling you danger is lurking somewhere around here. It might be right. It might not.

This is where courage can be a developer's best friend. Fear is an important survival instinct, but it is just fear. The creature on the television cannot hurt you, though your heart races. The unknown in front of you might be frightening, but you do not know whether it's roses on a warm summer morning, or a pit into the heart of a volcano, until you open your eyes, wander around, and explore it a little.

So trust your feelings, they are a fact. They are there for a reason. Your past experience might be acting on some wisdom you've yet to reason through. Gather some facts, reason it through, understand the source of your fear.

When you code fearfully, it can get bloated and ugly. Full of guards and redundant checks. Full of whatever mechanism comforts you, maybe some premature design patterns, maybe patterns that have done you well in past circumstances no matter your current circumstance.

Know too that your brain will coat your memories with a pleasant aura, this is a psychological coping mechanism. It may give you false security in repeating gestures you've made before. (If you want to read more on this idea, you should read a little from the field of Behavioural Economics, start with Daniel Kahneman's Thinking Fast and Slow).

Focus on what you know in the moment about what you are currently doing. Let go of the past, the lessons it taught you are circumstantial. Try to draw on the higher meaning from those teachings.

<b><i>Code courageously, based on facts, not on conjecture.</i></b>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date><![CDATA[2017-02-04 22:27:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-04 22:27:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[act-on-fact-not-conjecture]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A Leaf on the Wind</title>
		<link>https://codingculture.io/2017/04/25/a-leaf-on-the-wind/</link>
		<pubDate>Tue, 25 Apr 2017 12:33:44 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[I've been coaching other teams for over a year now (I spent 15 years coaching my own teams), but I still have a small software development shop bubbling behind me building products, where I have an apprentice and, occasionally, interns.

I can continue to manage the culture there, refine what I established with our larger consultancy in years past. Compare and contrast it to what I see in my coaching engagements. Also, unlike my coaching engagements, I can blog about it!

Last week I prefixed our Monday stand up with a talk about entropy, the essence of which I will present here. It gets a little philosophical, so grab yourself a cuppa.
<h2>Chaos Creeps</h2>
The world creeps towards chaos and entropy. The wind blows the leaves from the trees and scatters them in a mess. Our kitchen at home accumulates garbage, dirty dishes, recycling. Our pets find a piece of cardboard and shred it on the living room floor.

It happens in our code too when we are not careful.

Think about our life as a software developer. People come to us with scattered, unformed ideas in which we seek patterns and order. The technologies we use sometimes elude our understanding (happened to us this week with some sharp corners in cross-browser CSS3 flexbox) so we wander blindly looking to understand. Writing tentative code to build that understanding.

So here we are, a codebase full of exploration, of what was asked for, of what the market might need, of what we might understand. Pulling us in too many directions. Then add a couple people to the mix and we start dealing with multiple interpretations of those directions, multiple problem solving approaches, multiple mental models of roughly the same concepts, half in someone's brain and half in the code repository.

It's a wonder anything works, right?
<h2>The Professional On The Job</h2>
So here is the thing. As the professional on the job each of us is expected to spend each and every keystroke we make towards taming that chaos.

This involves talking to each other, while pairing and while exploring ideas with stakeholders. Using a source control system to isolate ideas and experiments. Writing tests first so that we have at least two perspectives on every line of code we write.

Sound familiar? It should. These are core activities in a modern, healthy, software development practice.

It is not your job to crank out code, it is your job to crank out the <em>"correct"</em> code in as <em>small a quantity</em> as possible. The "correct" code is the code that solves the <em>actual</em> problem.

Look at how much code you wrote this week. How much did you throw out? How much is covered by automated tests?

Throw out a lot of code. Writing it helped you understand the problem you are solving, the underlying technologies, the bugs in your communication. Don't get attached to that code. <strong>The value is not in the code.</strong> Then, while the learning is fresh in your mind, you will write a better implementation, solving something closer to the actual problem. Code worthy of your talent, worthy of the code base, worthy in the world. Commit that to your repo. Delete the rest, and revel in what you learned from it.
<h2>WTFs</h2>
<h3>You do use source-control, right?</h3>
Frequently I come across freelancers who don’t use source control. It amazes me. I just can’t imagine picking apart the chaos without seeing how it evolved, lifting apart the threads, zooming in on the nugget we half missed, pulling it forward to polish it off and commit it. Maybe they think their work is mundane enough to have an immunity to chaos (note above my CSS3 flexbox surprises). Maybe they never have to maintain the code they write because it became “done”, “shipped”, abandoned.
<h3>Surprise!</h3>
The chaos doesn’t always present itself right away, described in my “Chaos in the Matryoshka” post from years ago. Sometimes you find you were walking straight into it all along. Today I reverted 4 merges along our main branch in our current product, erasing 2 days worth of our work. It had to be done. The code was worthless. Sunk cost. What we deleted would have cost us weeks to maintain. What we learned will save us weeks knowing the bad path.
<h3>Incomplete thoughts</h3>
Especially early in projects, your code accumulates a number of half finished patterns, things on their way towards an idea you had. Then you have a better idea and more things are on their way to the new idea. You weren’t sure it was going to work out, so you held back so you could get some screens in front of stakeholders for timely discussion. On about the 3rd or 4th pattern things click and you apply it back to the other areas, and realize you can improve it, now you’re juggling 7 or 8 things that <em>almost</em> fit the ideal in your head, codified differently in the codebase. Then toss another person or two in that mix. Chaos, eh?

This can be one of the most insidious things to tame on a team. Alignment with each other takes time. When working remotely it takes longer. Pair programming is your single best tactic for dealing with this, and you can juggle the pairs so that the ideas spread as the pairs talk to each other. Pair and bring the threads together, between yourselves and in the code.
<h2>Every. Single. Keystroke.</h2>
The chaos naturally creeps in, you can’t stop it. You’re writing code to solve a shifting problem, in a shifting team, in a language that’s a work-in-progress, using frameworks that are a work-in-progress, in an editor that’s a work-in-progress, on an operating system that’s a work-in-progress, on a computer that you’re likely to replace in a couple years.

You are a leaf on the wind.

Every keystroke you make <em>must</em> tame the chaos.

The alternative is ultimately to be buried in your technical debt, all those little untied threads, those "I will fix this later"s, those "I don't have time right now"s.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2017-04-25 12:33:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-25 12:33:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-leaf-on-the-wind]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_is_cornerstone]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[164]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Worthiness of the Fizzbuzz Kata</title>
		<link>https://codingculture.io/2017/05/13/worthiness-fizzbuzz-kata/</link>
		<pubDate>Sat, 13 May 2017 15:04:21 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[I see a lot of misunderstanding around doing code kata in the work that I do.

Just this week, I had a conversation with my apprentice about <a href="https://codingculture.io/wp-content/uploads/2017/05/Fizz_buzz">Fizzbuzz</a>. He felt it wasn't a worthwhile kata to do because the problem was so trivial. So we had a talk, and today's Saturday morning rant was born :)

The purpose of kata is to practice, practice the same motions, repeatedly, until they are natural and you can stop actively thinking about them.

Because that's when you expose the underlying challenges, hiding in the weeds.

As programmers, many of us love programming puzzles. Some kata are great programming puzzles, and sites like <a href="https://codingculture.io/wp-content/uploads/2017/05/www.codewars.com">CodeWars</a> are great at gamifying this kind of puzzle solving. That's one kind of mental agility, work on a different problem every time, get good at tackling a problem and finding a resolution. The focus is on the problem in front of your face. You move on to a new problem, more complex than the last.

That is not the purpose of kata, however.

There is no practice in always doing new things. If every time you sat at the piano you tried to play a different song, play through the notes awkwardly, then switch songs, you won't learn to play any one song beautifully. You will in fact not learn any songs, you will be glued to the sheet music of the next song in front of you, slave to its instruction.

When the problem in front of your face is trivial, like fizzbuzz, you already know it inside and out. You need no instruction. It is unworthy of any active thought to find its solution.

Your active focus more easily shifts from <em>the thing</em> to the <em>effort in achieving</em> the thing, because the thing is unworthy. You focus on the <em>journey</em> instead of the <em>destination</em>.

You can now explore the art in the journey. You think about what kind of loop you use, or even if you use a loop at all. You think about how you write conditionals, and even if you need conditionals. You stop thinking about what you need to output, and you start thinking about how you output it.

I love facilitating kata in a group setting, because it allows me to wander and observe people's thoughts and approaches. It lets me drop hints, and enforce constraints when someone isn't shifting focus from the trivial problem to how they are solving it.

Sometimes I will also play "the requirements game." People are given incremental requirements, and are not allowed to ask questions. Like "Count from 1 to 25". Then I focus them on the smallest amount of code to satisfy that. Then "Oh, I forgot, print it to the screen!" As things progress, they don't know they're being led into Fizzbuzz until they get to the 3rd or 4th step. Then I turn it into FizzBuzzWoof. Then I introduce print vs screen. It's a fun journey to take together that explores how requirements tend to change on projects and how to write code that can survive that change.

If you think about your day to day work, it is rarely interesting from a programming puzzle perspective. However where we most get into trouble is in how we write our code to solve these trivial problems in a way that can better survive change.

So, enjoy the simplicity of Fizzbuzz. There is much to explore.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2017-05-13 15:04:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-13 15:04:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[worthiness-fizzbuzz-kata]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Revolution</title>
		<link>https://codingculture.io/2017/05/15/revolution/</link>
		<pubDate>Mon, 15 May 2017 12:38:32 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[We have built, unwittingly, a fundamentally flawed environment for delivering software. Incapable of dealing with bugs and viruses.

Commercial entities writing software inevitably must find a budget for dealing with their inevitably broken software.

But they rarely do, because there is no profit in it. It is a cost, to be triaged.

There is, however, great profit in exploiting it.

And thus the modern world was born, where exploits are hoarded as leverage, and the hoards are exploited as leverage.

And the world wonders why developers, who are <a href="https://codingculture.io/wp-content/uploads/2017/05/a-leaf-on-the-wind">a leaf on the wind</a>, don't just write better software.

And the developers wonder why people, who are simply fearful of the next attack, or the changes they didn't want, don't just update their software.

And the businesses wonder why customers, who wonder why they pay so much, can't just pay more to cover their costs.

It's software. It's made of bugs.

This industry needs a revolution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2017-05-15 12:38:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-15 12:38:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[revolution]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
		<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Coaching for “likability”</title>
		<link>https://codingculture.io/2017/06/03/coaching-for-likability/</link>
		<pubDate>Sat, 03 Jun 2017 15:49:27 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[Lately, I’ve been exposed to some commercial coaching practices that push the idea of “likability”, they seem to imply that if you develop your likability you will become a better leader. In looking into this, I’ve found articles on Harvard Business Review going back about 10 years. I won’t link the articles, they’re easy to find if you really have to.

I have a problem with running a coaching practice on messaging like this, I think it’s backwards, and I think it encourages an audience to be dependent upon you.

When I was a child, I really wanted people around me to like me. Especially my family.

For a whole bunch of reasons, when I began puberty, I began to withdraw and give up on seeking approval from my peers, but it was still there, suppressed. I remember how much I wanted to broadcast to the world when I started dating my first girlfriend, after years of kids calling me gay, who I just ignored at the time, I felt like they would accept me if they could see that I wasn’t. Well, eventually I realized that I am, LOL, just not in the way that <em>they</em> thought.

Even when I came out to my parents as transgender in 2011, I wanted their approval so much I nearly troddled off to conversion therapy. Sadly, many faith communities reject science, and willfully believe that this is the correct course of action. Before you judge my parents, understand that they have no context around them that would encourage them to accept me. And they want to be liked too.

So here is the thing. Wanting to be liked is very human. As with all aspects of humanity, it does not make you lesser. Where it gets dangerous is that you are at the mercy of others. You cannot control whether they like you, all you can do is try to do things that you think might help them to like you.

When you want people to like you, you have no control over your destiny, and you are in a disempowered state.

So here’s the moral problem I have with a coaching organization whose materials use “likability” as a headline in their marketing campaigns. It preys upon people’s susceptibility to dependence and addiction.

What I want you to do is the things that make you a good leader. Do them because you <em>are</em> a good leader and want to get things done. Don’t confuse cause and effect. The moment you look backwards and stress on whether people like you, your power drops to the floor, imposter syndrome creeps in, you begin to doubt yourself.

And when you feel that, you will want that empowered feeling back, and reach for help, for only $99.95, a ready-made time proven research backed formula to fix your problems. It will be compelling. I’ve bought this product dozens of times, at different prices, with different names, from different people. It’s a commercial tactic that works, because hope is easy to sell.

Once you’ve entered their funnel, their drip campaign, they repeatedly push themselves into your consciousness. Nagging at you. Continually preying upon your fear that people may not like you, and that it’s your fault that they won’t like you because you didn’t take that 1-day webinar. It’s a cycle that feeds itself, the material can sometimes help you find your empowered self reinforcing the idea that “it works”, and then they drip against you again for the bigger better product, feeding on your disempowerment and self doubt.

So here’s the other thing. You don’t need it. You are already <em>you</em>, which intrinsically includes your empowered self. You don’t need to look anywhere else except your own heart to find it. Find yourself a forest, a quiet waterfall, a cliff face to climb, a trail to walk. Quiet the cacophony in the world around you. Get the heck off my blog. Your empowered self will be there, quietly awaiting your arrival.

And remember, it’s OK to talk to yourself.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2017-06-03 15:49:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-03 15:49:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[coaching-for-likability]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[224]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Exploring Farming Metaphors for Software Development</title>
		<link>https://codingculture.io/2017/06/26/exploring-farming-metaphors-for-software-development/</link>
		<pubDate>Mon, 26 Jun 2017 17:13:27 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<em>Our friends who live down the road from us, always have such a beautiful garden and take amazing care of their animals. The way they've built their life, blending art and homesteading is an inspiration!</em>

In the software development field, manufacturing metaphors abound for what we do. It is a leaky abstraction, and I wonder if we can do better.

Much of what we do is informed by visionaries from the manufacturing sector, Taichi Ono, Eliyahu Goldratt, even more directly folks like Mary and Tom Poppendieck. Software development, however, is not the same as manufacturing. Framing our challenges here within that context can be informative, but it can also be misleading.

All too often in this context, our constraints look like people. That doesn't sit well with me.

So, what about farming metaphors?

<h1>Three Sisters</h1>

Before European settlers came to North America, indigenous peoples had evolved a deep respect for the land, and an agricultural understanding to match.

When corn, beans and squash are planted together, they thrive. These "Three Sisters" support each other in many ways:

<ul>
    <li>the corn stalks provide a tall column for the beans to climb upwards for sunlight</li>
    <li>the beans bring nitrogen to the soil nourishing herself and the others</li>
    <li>the leaves of the squash provide ground cover and mulch, shading the soil to keep it moist and discourage weeds</li>
    <li>the leaves of the squash are prickly, which can deter animals from snacking on them</li>
</ul>

<h1>Optimized Nutrition</h1>

The industrial revolution taught us to coalesce and optimise. The challenge with optimising for efficiency is our blind spots. We optimise for one metric and accidentally suppress some other desired metric.

White flour was a great invention we thought, excellent shelf life, pleasing to the palette and brain when used, but it turns out it’s all carbohydrates and no nutrition. Turns out the wheat germ and husk were an important part of the food.

But what did the food industry do? They invented another technology, vitamin enriched bread, to preserve their investment and legacy.

Oh, they made whole wheat bread too, but by then we’d had a taste and time to develop our addiction to this sugar-rich food and the industry that conveniently provided it.

<h1>Agrarian Culture to Factory Farms</h1>

Only a few generations ago we were largely an agrarian society. We grew a good portion of our own food and used markets to supplement. Now we depend on commercial farms and even commercial kitchens to feed ourselves.

We invented a food industry so efficient it destroyed nutrition and have spent a hundred years waffling over what's important, vitamins, cholesterol, fat, anti-oxidants, allergens, what's next?

People are so baffled by this mess we are in they're going back to "eat food" kind of advice, shop around the edges of your grocery store and avoid the heavily optimised products in the middle.

Goldratt's key point in his book, The Goal (1984) was that a (factory) system 100% utilised is inefficient. It feels like we are falling over the agricultural equivalent. We’ve optimised for local metrics without enough attention or knowledge of the overall system. Welcome to Systems Thinking.

<h1>Building Software - Co-location</h1>

The software industry started like an agrarian system. We wrote our own business software, supplemented with purchased tools like operating systems and compilers. Many operations continue in this way, you’ll find them working in 30-year-old COBOL, REXX, or PL/I code.

Our desire to optimise has lead us to silos and separation in seeking optimisation. We put the developers over here, the project managers over there, the testers in the corner and the business across the street.

Like a garden, some plants may not do well together, but some will thrive if given the chance to be together. Co-located teams is a core tenet of agile development because we have seen it work. We may still not fully understand the dynamics of why it works, but we have at least anecdotal and more and more empirical evidence as years go by.

<h1>Building Software - Dependencies</h1>

We rely heavily on outsourced tooling that reaches deeply into the code we write. UI controls libraries, architectural framework tooling like MVC, rules engines and document publishing tools. Then, more often than not, we write code that is so tightly coupled to it that we could never extract it without rewriting.

As with a garden, we can realise the systems around us. We can take the time to separate our food waste and compost it. Stop stockpiling code we write that is waste and instead use that time to ferment and distill new skills, which will enrich the smaller and more important code we must write. Measure the soil and sunlight so we know where to put people and what nutrients they need. Build an abstraction over here, grow a tall plant over there.

Your garden will grow best with some things together, and some things apart. Just like your code. Transplanting is a common task of the experienced gardener. How much of your code would survive transplanting?

<h1>Building Software - Farm to Plate</h1>

We hire offshore developers from remote developing economies seeking to optimise on an hourly cost. Or bring in migrant farm hands working for less than our minimum wage.

With a garden we could nurture and watch over it while it grows in front of us. We can see which bugs are on the leaves, how the rabbits make it through the fence to eat the lettuce. Plant some prickly squash plants to repel the racoons.

The people around us best understand our needs because they live beside us and have some level of intrinsic understanding. We grow up with a certain mix of allergens, they become part of the fauna, we consume them and build immunity. Eating food from far away is tasty, but doesn’t always agree with our digestive system.

Sometimes this is demonised by the “not-invented-here” syndrome, and it can be taken too far, but there is a certain intimacy you have with locally grown code that just isn’t present with imported code. Are your choices to import food driven by a lack of food, or by a desire to have tastier or exotic food? What does food safety look like with imported code?

<h1>Building Software - Farmers Almanac</h1>

Over the years we’ve sought help from design patterns, object-oriented development, functional development, looking for guidance and help in writing good software.

Our Coders Almanac hasn’t fully materialised, but we see chapters written here and there. A little on animal husbandry over here, some companion planting advice over there, some weather predictions over the top. We have some well recognized published advice and a growing body of knowledge in both realms. We shall see what stands the test of time.

<h1>Growing</h1>

Farmers grow food. We grow software. I think there’s lots more to explore in this metaphor. I hope this has whet your appetite a little :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2017-06-26 17:13:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-26 17:13:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[exploring-farming-metaphors-for-software-development]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
		<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://codemanship.ca/wp-content/uploads/2017/06/Screen-Shot-2017-06-26-at-11.39.13-AM.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://codemanship.ca/wp-content/uploads/2017/06/Screen-Shot-2017-06-26-at-11.39.13-AM.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[software development]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[software development]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Exploring Farming Metaphors for Software Development]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[In software development, manufacturing metaphors abound for what we do. It is a leaky abstraction, and I wonder if we can do better.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[238]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image-id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[DRAFT] Hiring DevOps Won&#039;t Buy You Continuous Delivery</title>
		<link>https://codingculture.io/?p=241</link>
		<pubDate>Sun, 8 Sep 2019 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codemanship.ca/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[So, I've been lurking around various places in the devops world over the years, and lately I've been cruising job postings related to it. I had a conversation last Friday with a colleague, and during I began to wax philosophical about the purview of devops. Afterwards I realized I'd touched on something that I haven't seem much discussion around.

I must admit, I used to think of it as a job title too, but I've learned much since then. What kind of activities do you expect to hire this new person to perform?
<ul>
	<li>Build out and maintain your Jenkins / Travis / et al server?</li>
	<li>Build out and maintain your Artifactory / et al server?</li>
	<li>Build out and maintain various build scripts in your system?</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2017-07-04 16:18:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						</item>
					<item>
		<title>Oppression in Machine Learning</title>
		<link>https://codingculture.io/2017/07/11/oppression-in-machine-learning/</link>
		<pubDate>Tue, 11 Jul 2017 10:10:34 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=273</guid>
		<description></description>
		<content:encoded><![CDATA[Popular media loves to talk about "artificial intelligence" these days. It is a hot topic, one riddled with misunderstanding.

Artificial intelligence is a misnomer in our field - professionals call this emerging interest "machine learning" because the <a href="https://codingculture.io/wp-content/uploads/2017/07/can-machines-be-intelligent">jury is out as to whether there is any real intelligence behind it</a>.

Ask any researcher about how easy it is to bias a survey through what question we ask, how we ask it, what questions we ask before and after it, and you will begin to understand the mechanisms through which decisions made by computers can be similarly biased. Simply put, I can ask you "Are you feeling well?" or I can ask you "How are you feeling?", the first question anchors your context so your answer relates to "well". The second question, because of the lack of context could elicit answers like "hungry", or "with my fingers."

In this way, machine learning models blatantly inherit, and worse can magnify the systemic oppressions inherent in how the person who designed it thinks.

That's right, our machine learning models are <a href="https://codingculture.io/wp-content/uploads/2017/07/google-apologizes-for-algorithm-mistakenly-calling-black-people-gorillas">racist</a>, <a href="https://codingculture.io/wp-content/uploads/2017/07/p31_A%20Study.pdf">classist</a>, <a href="https://codingculture.io/wp-content/uploads/2017/07/hajian.pdf">ageist</a>, misogynistic, heteronormative and cisnormative just like we are.

The software field is suffering a diversity crisis. Small monocultures have a tremendous impact on how we interact with the world through technology, and the effects it has on us. Everything from the <a href="https://codingculture.io/wp-content/uploads/2017/07/heres-a-list-of-58-gender-options-for-facebook-users">digital representations of our personhood in cyberspace</a> and therefore how others perceive us, to how <a href="https://codingculture.io/wp-content/uploads/2017/07/instant-recall">our own memories</a> are impacted by algorithms that seek to remind or raise attention to a similarly distorted view of our past.

For developers wishing to raise their awareness and avoid some of these traps, I recommend two talks by <a href="https://codingculture.io/wp-content/uploads/2017/07/cczona?lang=en">Carina Zona</a>. "<a href="https://codingculture.io/wp-content/uploads/2017/07/PYYfVqtcWQY">Schemas for the Real World</a>" discusses how we codify oppression in our databases, and "<a href="https://codingculture.io/wp-content/uploads/2017/07/znwWYR1mzzw">Consequences of an Insightful Algorithm</a>" discusses examples of how naive algorithms at our favourite Internet companies are violating privacy and further oppressing people in the world around us, often without our direct knowledge.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2017-07-11 10:10:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-11 10:10:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oppression-in-machine-learning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Who are you?</title>
		<link>https://codingculture.io/2017/07/14/who-are-you/</link>
		<pubDate>Fri, 14 Jul 2017 10:43:38 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[What’s your job title? What does it say about you? What doesn’t it say about you?

We are human beings, doing what we can with the tools we have, filling a role as best we can. A job title doesn’t define who we are, and it doesn’t define all that we bring to that position.

Being a parent, for example, can change how you write code. That label brings with it a cascade of images and stereotypes – our parents and our friends’ parents as we grew up, maybe June and Ward Cleaver, or Carol and Mike Brady, Danny Tanner, or Mike and Vanessa Baxter in the TV we watched. Our lifetime of experiences shape our idea of being a parent, that same lifetime of experiences that shapes how we write code.

A friend of mine once asked, “how much of myself should I bring to work?”

My answer, of course, was “all of you!” You can’t leave some part of yourself at home when you come into work. Well, maybe your glasses, but you know what I mean. If you’re suppressing something, it’s going to be a stressor, and you won’t be able to concentrate as well on what you’re doing.

Our jobs need our whole attention and our whole selves. The problems we have to solve are complex. Sure our core skills we bring to bear are critical, but when we’re solving those problems we draw on all of our experiences and knowledge. I learned things in wood working, or craft brewing, or quilting, or growing up with five siblings, or skiing, and when <em>this</em> crazy thing happened, I solved it <em>that</em> way.

“Party Animal” you from back in college might have something helpful to bring to the table, if only maybe a little enthusiasm. “The Quiet Kid” might be good at listening. “Dad” might need to come out and broker peace between co-workers.

I have a personal perspective on all of this due to my own life path. As a transgender woman, I lived much of my life where the world around me believed I was a man. I felt I was deceiving people. I felt I was cheating at life, accepting what I knew was male privilege, when other women had to deal with all these struggles. I put a large part of who I was into a box and left it at home every day, and it ate me up inside.

In 2011, I changed all that and showed the world who I am. Well, truthfully, transition is complicated. That process started 3 years before and I don’t think I’m done yet.

But after that point, my life became markedly different in ways most of the world never saw. I was me. All of that stuff I had left in the box, I lay out on my desk in front of me, and it changed so much of how I approach things now. I still have all the same skills, the same work ethic, but now I’m unafraid to bring parts of myself to bear that before this might have made me seem feminine. A man appearing feminine still carries so much stigma it had terrified me. I shed an entire layer of vulnerability, and it felt amazing. I got better at doing what I do.

Your journey has probably been a lot different from mine. That’s awesome because I didn’t learn the same things you learned, just like you didn’t learn the same things I learned. Together we have a better chance of solving the complex problems in front of us.

So how is this relevant to the coaching work that I do? It is the essence behind many of the practices I bring.

Pair programming brings two people together to tackle one problem. Research has shown us that it works – it results in higher shared understanding, and higher quality code that requires less rework, but it’s hard. Sometimes people resist. As a coach, I can help with that. I can observe and suggest changes as a neutral party that can help that practice work better for you.

Retrospectives bring the team together to talk about how things went. A good retro has people talking openly and honestly about how to make things better. If they don’t feel safe, if they feel vulnerable in some way, the retro is going to be a waste of time because they won’t share what needs to be said. As a coach, I can help with that. I can observe and make suggestions that can make the space safer, make it easier to say those hard things that need to be said so that we can work together to overcome them.

I could go on, but this post is long enough, so I’m going to leave it here. I think you get the idea.

What labels do you wear?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2017-07-14 10:43:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-14 10:43:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[who-are-you]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
		<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[381]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>What is an Agile Technical Practices Coach?</title>
		<link>https://codingculture.io/2017/07/14/what-is-an-agile-technical-practices-coach/</link>
		<pubDate>Fri, 14 Jul 2017 11:34:40 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=338</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>The Past</h3>

Software development today is very different than 10 years ago, and worlds apart from what it was 20 years ago.

20 years ago, we wrote software and shipped it out on disk or CD-ROM. People expected new versions of the software they used, say Microsoft Word, every 2-3 years. Our timelines were long, and we had development practices that matched that. People would request a feature, and 2-3 years later it would appear. Maybe you were really responsive and it was 6 months to a year.

<h3>The Present</h3>

Today, the companies that do it best ship new code every few seconds. They don’t ship much that’s new every few seconds, the updates are smaller, but they flow.

To ship software like this takes a monumental shift in how you build it from what many of us learned.

Much of that shift happens at the organizational level. How do we reshape our business processes to make sure we gather feedback from users, streamline it to the development team, and get it deployed to the world. In this regard, our industry has done fairly well - many organizations ship web-based and mobile software on a timescale of weeks rather than months.

Much of that shift also happens, however, at the code level.

If you’re still coding like we were 20 years ago, you’re not going to be able to keep pace.

Pushing hard things off to do “later” or cutting corners that we’ll fix “later” is especially dangerous, because when “later” arrives you’ll be at least as pressed for time as you are now.

<h3>Core Practices</h3>

So what are the core practices of an Agile Technical Practices Coach?

Many of our best practices were actually envisioned 20 years ago by Kent Beck, Ward Cunningham, Ron Jeffries, and others. They so strongly resonated with the development community that Extreme Programming (XP) was born.

Today the following practices have survived the test of time:

<ul>
    <li>Pair Programming builds higher quality code that requires less rework, and spreads knowledge of the codebase throughout your team, thereby reducing risk</li>
    <li>Test-driven development (TDD) guides developers to build code that can be tested, because most code we have out there is literally untestable. TDD’s test, build, refactor cycle (or what developers call “red, green, refactor”) provides a place to centre several other practices
<ul>
    <li>the cycle spins every few minutes, so you’re never more than a few minutes away from when everything was working</li>
    <li>you commit changes to source control, providing a steady stream of small changes that are easier to merge together, and most importantly a short log message explaining them</li>
    <li>you refactor your code so that it is better organized, has less duplication, and is as small as it should be</li>
</ul>
</li>
    <li>Refactoring helps you reshape the code underneath the boundaries that make business sense, bringing you independent developability and independent deployability, helping you release more often and divide work between teams; this is different than restructuring which is riskier but lets us reshape those boundaries to align with business needs</li>
    <li>Automated testing provides assurances that the code written still works (unit tests), that the systems built from the code still work (integration testing), and that your product still works (acceptance testing)</li>
    <li>Practice (coding kata) is a way for developers to build skills outside your codebase. With practice and repetition comes confidence and skill, so let developers learn outside of the code you deliver to your customers.</li>
</ul>

Knowing these practices at an intellectual level, and putting them into play every day are two different things.

<h3>The Coaching</h3>

As a coach, it’s my job to help developers put these practices into play. Watch their body language as they pair program. Scan their commit logs and help them write better messages. Help them understand the boundaries in their code so they can use refactoring to make them clearer.

So, as a coach, I layer the following on top of the technical practices work:

<ul>
    <li>assess the team, their mix of skills, and their needs</li>
    <li>provide actionable recommendations for change based upon the tangible things that I see in your organization</li>
    <li>ensure that the execution of those changes goes smoothly, they are internalized by the team, and then repeat this process as necessary</li>
</ul>

Your codebase is an investment, and you need it to be working for you. The sooner you can put features in front of customers, the sooner you can begin realizing a return on that investment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date><![CDATA[2017-07-14 11:34:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-14 11:34:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-an-agile-technical-practices-coach]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[312]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267542]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_36302]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267557]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267559]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Lenses</title>
		<link>https://codingculture.io/2017/07/18/lenses/</link>
		<pubDate>Tue, 18 Jul 2017 14:36:58 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=367</guid>
		<description></description>
		<content:encoded><![CDATA[I started wearing glasses a few years ago, entering in to that cycle of a new prescription every few years to renew my focus.

Thinking about that today, I think about the lenses I've worn over the years looking at my field of software development.

The lens of Patterns helped me see that the shapes that form in our code can be named, and thus I could see the borders between areas in my code more clearly. I learned that by strengthening those borders I could benefit more directly from those patterns, and others would understand more about my code's intent.

The lens of Extreme Programming helped me look at how I worked with my team members differently. I saw how pair programming could be a real time peer review, the value of a co-pilot when coding, the insight from being a co-pilot.

The lens of Scrum helped me see the long cycles I was stuck inside, and helped me to shorten them. I found ways to sketch out my code before the fine details were needed.

The lens of Lean Software Development helped me see how I was making decisions too early in my code. I found ways to delay making those decisions to buy myself time to learn more about the work that needed to be done, and make better decisions later.

The lens of Software Craftsmanship helped me find balance between making things that work and making things that I considered beautiful. I re-found the practices I'd long ago learned from Extreme Programming and took more opportunities to help others practice them.

The lens of Kanban helped me see that the smaller cycles I sought in Scrum could be smaller still, and could happen concurrently. I found new ways to explore cohesion on a team, and to deliver software continuously rather than at Sprint intervals.

The lens of Theory of Constraints helped me see that unlike the resource constraints we see in manufacturing, the constraints we find in software are more often understanding. I found new ways to subjugate to and elevate those constraints.

How many more lenses will I wear in my career? I have no idea. But I look forward to the added clarity each new pair brings.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date><![CDATA[2017-07-18 14:36:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-18 14:36:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lenses]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[366]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A Nurturing Culture</title>
		<link>https://codingculture.io/2017/07/29/sustainable-change/</link>
		<pubDate>Sat, 29 Jul 2017 14:48:06 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[I drew this picture to illustrate a few ideas, and it’s long overdue for an explanation beyond the few folks at whom I’ve stood in front of and waved my arms.

[caption id="attachment_437" align="aligncenter" width="300"]<a href="https://codingculture.io/wp-content/uploads/2017/07/IMG_0036.png"><img class="wp-image-437 size-medium" src="https://codingculture.io/wp-content/uploads/2017/07/IMG_0036-300x300.png" alt="" width="300" height="300" /></a> Note to the reader: This isn't a cartesian graph, there is no X and Y axis, despite the way I drew it... In future iterations I will draw the diagonal line from top-left to bottom right to more closely align that interpretation with my intent.[/caption]

So let’s decompose it a little, starting with this.

<a href="https://codingculture.io/wp-content/uploads/2017/07/IMG_0024.png"><img class="size-medium wp-image-440 aligncenter" src="https://codingculture.io/wp-content/uploads/2017/07/IMG_0024-300x300.png" alt="" width="300" height="300" /></a>

As a coach, or a trainer, or really as a human, we have only so much time in our day. We can choose to spend all day with a single person, divide our day and spend an hour with each of 8 people, or half an hour with 16 people.

So simply put, at the top of the picture you’re spending larger amounts of time with fewer people, and at the bottom of the picture, you’re spending smaller amounts of time with more people.

<a href="https://codingculture.io/wp-content/uploads/2017/07/IMG_0026.png"><img class="aligncenter size-medium wp-image-441" src="https://codingculture.io/wp-content/uploads/2017/07/IMG_0026-300x300.png" alt="" width="300" height="300" /></a>

So we strategize on how to reach more people.

To go beyond a small number of people we have many options, but the easiest can be to group them together. Pack a meeting room or a lecture hall or an online meeting. We are still present, but now we can speak to a wider audience and retain some elements of an interactive conversation.

Our communication style becomes more one way, less interactive, but we can build some understanding of our ideas up in a larger audience.

At the bottom of the picture, we take this to the extreme. We write a book, a blog post, do a webinar, assemble some courseware. We can now speak to our widest audience because each incremental person doesn’t require additional attention. Feedback is limited, and no longer in real-time.

<a href="https://codingculture.io/wp-content/uploads/2017/07/IMG_0027.png"><img class="aligncenter size-medium wp-image-442" src="https://codingculture.io/wp-content/uploads/2017/07/IMG_0027-300x300.png" alt="" width="300" height="300" /></a>

Now let’s layer a learning model on top of it, and this is where it gets interesting. I’m most familiar with <a href="https://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition">Dreyfus’ model of skills acquisition</a>, so I will use that terminology.

I built an Apprenticeship Program at my consultancy as I embedded myself in the Software Craftsmanship movement, and I’m sure you’ll see what I saw if you look around. I remember being so excited when I discovered Dreyfus paper; it fit so well what I saw first-hand.

Consider a Novice. They find themselves in a bind, and they don’t know what to do. They seek an answer, instruction, something actionable. To whom do they go for help?

If they go to an Expert, they might ask “Hey, I see this thing. What do I do?” and the Expert might say, “Hmm. That’s an excellent question. What do you want to do?” The enlightened expert is so far away from the Novice conceptually that there is no bridge for communication. The Novice becomes confused and goes away with little if any direction.

If however, they go to an Advanced Beginner or Competent person, their answer would likely be very different. “Hey, I see this thing. What do I do?” results more often in a response like “I see you’re in situation X, and there are three things we normally do to get from X to Y. Do A, B and then C.” Naturally, the Novice can now act.

Things are this way for many reasons, particularly in the lower rungs of the ladder. When we are only a little higher on the skills ladder, we still have fresh in our minds the challenges we faced at the rung before. Because we can more often relate, our stories resonate and feel more pragmatic; our communication is stronger because of that commonality.

Also, naturally, there are fewer people nearer the top of the picture than nearer the bottom, so we automatically have a system with a distributed means of reaching people effectively at every level. The many Advanced Beginners can teach rules to Novices, for example, as long as their learning path aligns towards the experts’ understanding.

<a href="https://codingculture.io/wp-content/uploads/2017/07/IMG_0028.png"><img class="aligncenter size-medium wp-image-443" src="https://codingculture.io/wp-content/uploads/2017/07/IMG_0028-300x300.png" alt="" width="300" height="300" /></a>

And finally we’re at the full diagram, illustrating people at every level contributing to the overall learning of the system or organization.

It’s poetic, isn’t it?

The same learning model applies to any skill we want to learn. Said another way, every different skill I have falls into this chart. Some things I’m learning, some things I’m teaching.

I wrote before about <a href="https://codingculture.io/2017/06/26/exploring-farming-metaphors-for-software-development/">exploring farming metaphors in software development</a> and the idea of the Three Sisters. These vegetables, when planted together, reinforce each others’ growth. I believe this same concept exists within many systems.

This symbiosis is why I so firmly believe in the agile notion of cross-functional teams. In most of my seminars, I specifically include a short discussion of the labels we all wear, personally and professionally. I may wear on occasion the label of a “programmer,” or a "coach," but my skills are a mixed box of tools. Pairing me with someone with a slightly different toolset than mine can only strengthen the both of us.

Further, I believe some functions can be very strongly symbiotic - say development and testing, or development and experiential design.

Of course, in the end, this all is in the hands of actual people in your organization. Their willingness to learn or teach. Their desire to be more liquid in the application of themselves to work at hand, to “change hats” if you will, and exercise and build skills that aren’t necessarily defined by their job title.

I talk a lot about culture, but in the words of Steven Pinker, “When culture is seen as an entity with beliefs and desires, the beliefs and desires of actual people are unimportant.”

So to promote this exchange of learning and coaching within your organization, we must ignite within individuals the desire to learn and to share. The desire to collaborate and bring our skills together. Mutual respect and acknowledgment of each other’s expertise and humanity and personal experiences.

In building these sentiments in people and working towards a healthy culture, I believe our challenge becomes primarily to manage negative emotions like fear and shame. People fear being perceived as “lesser” and losing their status, or worse their job. They feel humiliated after making a decision that turns out poorly. These emotions can turn the most honourable motives sour, but alas that is a different topic entirely.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date><![CDATA[2017-07-29 14:48:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-29 14:48:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sustainable-change]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[437]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Coding Is Social</title>
		<link>https://codingculture.io/2017/08/07/coding-is-social/</link>
		<pubDate>Mon, 07 Aug 2017 13:17:48 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=453</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://codingculture.io/wp-content/uploads/2017/08/IMG_0067.jpg"><img class="alignright size-medium wp-image-457" src="https://codingculture.io/wp-content/uploads/2017/08/IMG_0067-300x169.jpg" alt="" width="300" height="169" /></a>This past weekend, I took part in the <a href="http://ptbogamejam.com">PTBOGameJam03</a> event in Peterborough, Ontario, an event that has steadily grown since August 2016. In case you don’t know, a Game Jam is an event where people come and work alone or in teams to build a video game, start to finish. Art, sound, code, gameplay, all of it.

And I have to give props to the organizers of PTBOGameJam – bringing in over 60 developers, on a long weekend in August, in Peterborough Ontario (1.5h North East of Toronto) is no small feat!

I’ve written on the theme of social coding many times before, and it is worth repeating. Everywhere I look I see the stereotypical depiction of a software developer. Closed off from the world, socially inept, stick 'em in a back room and slide pizza under the door, don’t let 'em talk to the customers, feed 'em requirements and they churn out code, they’re a “resource” so just hire more of 'em when you need to, and if you can get ’em cheaper elsewhere all the better. I’ve also written a lot about the commoditization of software developers and other creative professionals.

If you have the opportunity to experience a code retreat, or a hackathon, or a game jam, I highly recommend wandering around and watching what goes on.

The culture of a Game Jam is electric. We had people making art, music, writing, 3D models, code, everything game related. All to a driving soundtrack, <a href="https://www.twitch.tv/ptbogamejam/videos/all">live-streamed to the world</a>, for 32 hours straight, 9 AM Saturday morning through 5 PM Sunday afternoon.

As always happens with creative endeavours, people get frustrated, stand up and wander around, look over someone’s shoulder at some code they’re writing, a model they’re building, the artwork they’re drawing, as they move their legs a bit. They pause and comment, “How’d you do that?” “Oh, that’s awesome, I never thought of that!” “I can’t get this to work, do you know anything about…” “Oh, the code’s on Github, check it out.”

So much encouragement, praise, frustration, joy, all these things were alive on the floor at all times. Like I said, the atmosphere is electric.

At the core of this culture, I see the values of the original “Extreme Programming, ” and “Agile” movements lit up and in play. People are working with people, communicating and collaborating to get things done. These values surfaced in the software community because humanity thrives on them, it evolved to do so. It’s in our hearts, this electricity.

Professionally, I have made a career out of drawing these values out of folks and putting them in play. Encouraging people to take part in pair or mob programming, or just to walk over and talk to each other. When that happens, you see a small spark of this electricity take form. It drives the conversation, finds new ideas to old problems. People step outside their comfort zone in the magic and safety of it all to explore and achieve.

When we cut ourselves off from each other, the electricity can’t flow. When we insulate people with walls, or distance, or paper, or process, the electricity drains away. Sure, lots of folks need to retreat to their space, put on some headphones, close the door to get some focus and flow time, but when they open that door or take off their headphones to wander and find inspiration or ask a question, it sparks readily again.

People who denigrate the agile movement by reducing it to the removal of process and the encouragement of chaos, have failed to see the unifying effect of purpose. This past weekend's PTBOGameJam was a testament to how a common goal, community, a seemingly impossible timeline, and a genuine internal desire to achieve brings out greatness in people.

*Photo credit, <a href="https://twitter.com/rdolishny">Rick Dolishny (@rdolishny)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date><![CDATA[2017-08-07 13:17:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-07 13:17:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[coding-is-social]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[452]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Four Things Impeding Your Software Teams</title>
		<link>https://codingculture.io/2017/08/21/four-things-impeding-your-software-teams/</link>
		<pubDate>Mon, 21 Aug 2017 12:44:57 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[In the beginning, teams tend to be able to deliver working software with little friction. In fact, developers tend to love “green field” projects in which they get to start again with a blank slate.

Then over time, things take longer and longer to accomplish, to the point that folks urge again for a “rewrite.”

Why is that?

<h2>1. Technical Debt</h2>

Over time, under the pressures to “deliver,” you will see compromises made. Here are just a few scenarios:

<ul>
    <li>We know that we should do "thing A" but don't have time, so we do suboptimal "thing B" instead, and A is pushed into the icebox as a “clean-up later.”</li>
    <li>A developer begins "thing A", and realizes that what she just did can simplify many areas of the codebase. Her current story doesn’t touch on those areas, and that “extra” work wasn’t in the estimate. Disempowered to do the work, the “refactor” hits the icebox as a “clean-up later.”</li>
    <li>A large task is divided between developers, some remote, some local. When everyone’s done, there were four different approaches taken to the same problem. Nobody noticed and now each new developer on the project finds a different “guideline” on how to do the same kind of work.</li>
</ul>

Culture is a series of concentric bubbles, most far beyond your influence. Sometimes even if there isn’t direct time pressure from management, there’s an external cultural pressure to cut these corners.

Your developer culture is created by how each developer interacts with the people around them, both online and offline. Online sources of culture are pervasive and uncontrollable, like Google and Stack Overflow. Every teacher, professor or boot camp instructor that had an impact on a developer. Their peers that work elsewhere in the industry.

Even when you urge your teams to “do the right thing” these voices can work against you. And, even more insidiously, how do you or they know and agree upon what “the right thing” even is?

You must together decide what "the right thing" is, and ensure that it has the loudest voice in the room.

<h2>2. Tight Coupling</h2>

In our rush to be “relevant” developers will often track new technologies in the software space. We’ll look at that fancy new web framework or database technology with envy, dreaming of all the ways our lives would be easier if we could just adopt it.

Laudably, we’ll seek to avoid “re-inventing the wheel” and find third-party libraries that will help us avoid tricky problems or large volumes of work.

When we integrate these things, the prescriptive approach is most often to start scattering references to that fancy web framework or helpful new library all through our code.

When the day comes when the library is no longer appropriate, and it will, we will have hundreds of references to it scattered throughout our codebase. The work and risk involved in its removal pressure you to leave it in place. It becomes more and more obsolete; the world discovers security vulnerabilities.

Oh, and it's not just third-party libraries. Choosing when to couple portions of your own system together should be a conscious decision.

Each tight coupling is like another pin, holding us down, limiting our flexibility.

As a team, we can reach out and find the strategies that protect ourselves from tight coupling and the risk in those unpredictable outside and business forces. We can agree on what strategies to use, and decide how to apply them.

<h2>3. Weak Cohesion</h2>

A developer is not a constant. She is a person on a life journey. The way she solves problems today is different than the way she did last year and will be different than her approach next year.

People don’t have a perfect memory, and all come to the table with their personal history of experience.

Sometimes even when we’re talking to each other, we can be solving the same problem and not realizing it. It’s not that we’re not intelligent, we just don't often feel comfortable stepping outside our focus. After all, we're burning precious estimated time on our own to-do.

So the same ideas are repeated, in different ways, scattered around our code.

Another factor is the way novices write code, or even more experienced folks when they're feeling unpracticed. We begin looking for something like what we need that’s already in the code. Then, we replicate that and adapt it to our specific need. On the surface, it sounds efficient. A quick way to get something done.

The problem with this is entropy. It scatters bad ideas back through the code after we work so hard to remove them.

We must work hard to limit the proliferation of the things we don't want and promote the things we do want.

But first, we need to agree as a team on what those things are.

<h2>4. Incidental Complexity</h2>

Mark Twain wrote, “I didn’t have time to write you a short letter, so I wrote you a long one instead.”

It is hard to make things concise, to protect ourselves from the external influence of those third-party frameworks, to come up with the creative, elegant solution.

Incidental complexity gathers around us while we don’t have these things under control.

We didn’t set out to make things complicated, but it was the easier path.

As human beings, we have a limited capacity for dealing with complexity. Psychological studies show us that on average we can only hold five to seven things in our heads for a couple of minutes at a time.

So the more complex a piece of code is, the longer it’s going to take people to reason about it, the longer it’s going to take to change it, and the more likely there will be unintended consequences after doing so.

So if over time, the chaos naturally pushes the code to be more complex, then over time, it will take longer to do things, and there will be more bugs produced by doing them.

<h2>The Good News</h2>

We have tools to deal with these situations.

It takes an effort to control the chaos, time to find and empower your technical leaders, and courage to move forward.

Your team has the leadership, the courage, and the energy. We just have to find it, inspire it, and activate it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date><![CDATA[2017-08-21 12:44:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-21 12:44:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[four-things-impeding-your-software-teams]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[310]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Thing You Need On Your Radar</title>
		<link>https://codingculture.io/2017/09/02/thing-need-radar/</link>
		<pubDate>Sat, 02 Sep 2017 14:53:29 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[I was talking to a colleague yesterday, smart guy, basically been focusing on systems level architecture and is maneuvering his employer in a good direction. After my session that day on agile technical practices, I'd left their whiteboard cluttered with my stuff and two of my leftover words drew attention and helped him drive his topic a bit more home.

<a href="https://codingculture.io/wp-content/uploads/2017/09/fullsizeoutput_2641.jpeg"><img class="alignright wp-image-471 size-medium" src="https://codingculture.io/wp-content/uploads/2017/09/fullsizeoutput_2641-300x300.jpeg" alt="" width="300" height="300" /></a>"Tight Coupling."

Afterwards, he tagged me and brought it up, I mentioned that in my next session I would be talking about the Last Responsible Moment, excited that our work was dovetailing so nicely.

And then he was concerned, and I had to find out the reason for the shift.

Me, "the last responsible moment is when you can't defer a decision to use any particular technology any longer, you know as much as you're going to know about the domain to make the best decision, and delaying any further would cause harm to the product due to the indecision."

Him, "when I've mentioned that before it was interpreted as don't bother abstracting the technology quite yet, we don't yet have the need."

My example left on the board was about refactoring a tight coupling to the Mongoose ORM layer for MongoDB. The idea of removing that tight coupling from the line of business code had resonated.

He had directed the team around an estimation exercise to remove the tight coupling to Mongoose a few weeks earlier. It had resulted in lofty estimates due to the number of individual references to Mongoose. It just seemed like such a big job to update them all.

Here was the surprise, I said that if they'd been following good technical practices, they wouldn't have had the quantity of couplings they saw in their code.

He pushed on the deferring the abstraction point.

<a href="https://codingculture.io/wp-content/uploads/2017/09/fullsizeoutput_2643.jpeg"><img class="aligncenter size-large wp-image-472" src="https://codingculture.io/wp-content/uploads/2017/09/fullsizeoutput_2643-1024x1024.jpeg" alt="" width="750" height="750" /></a>I said that deferring the abstraction was likely a violation of the Single Responsibility Principle and a breakdown in cohesion because they were mixing high-level business logic with low-level database calls.

And bang, I gave him the language he needed to further progress what he is trying to accomplish.

Just today, another friend on social media who also does Technical Practices coaching illustrated a scenario where a client was asking for Scrum, and he asked if they needed technical practices help, and the response was basically "no, we're good, we just need help with Scrum."

So he said, "so, they deliver high-quality software with almost no defects that can be delivered to users at any time?"

Crickets.

Somehow the promise of Agile has become that a process framework like Scrum will give the software team what it's missing. The framework will solve what's causing the software team to seemingly misfire. The successful commercialization of Agile has lost the spirit of what it is about and seems far away from its roots in Extreme Programming (XP)..

The process framework is just a process framework, and the breakdowns at the team level may or may not be a result of a process problem.

I will guarantee, however, that a slowdown in feature delivery, a decline in quality, is absolutely a breakdown in technical practices.

If my associate's team had been mindful of concepts like cohesion and the Single Responsibility Principal, if they were practiced in applying them, and if they were following at-the-keyboard disciplines like test-driven development and refactoring, they would not have had such a high occurrence of tight couplings. These would have naturally given way to be refactored into something like, say, the Gateway pattern and had little work to do to replace the technology they no longer wanted.

But as it is, they pushed more technical debt onto the stack with each tight coupling they left behind, and now they need to pay that debt back to make their move.

The Last Responsible Moment is supported by good technical practices, because you are given the possibility of using a simpler or less infrastructure heavy stand-in until you truly need to scale, or adopt a fault tolerance strategy, or adopt a new more capable or compatible 3rd party technology, or whatever is forcing your technology pivot.

So here's my point.

<em><strong>If your software team is suffering quality or velocity problems, it </strong></em><strong>may</strong><em><strong> have something to with process, but it </strong></em><strong>WILL</strong><em><strong> indicate a breakdown in technical practices.</strong></em>

If technical practices aren't on your radar as a component of your agile transformation, you are putting it at risk.

Developers don't "just know" how to code in an agile environment. The pace of change that comes with agile processes can stress their ability to deliver flexible code to the breaking point.

They must learn, practice, receive training and coaching to help them support the whole business in their agile endeavour.

If Agile Technical Practices are not on your radar, your transformation may meet short term success on a new project, but with existing projects and even new projects over time, the growing technical debt will sabotage it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date><![CDATA[2017-09-02 14:53:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-02 14:53:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[thing-need-radar]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="business"><![CDATA[Business]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[477]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[agile technical practices]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[agile technical practices]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>How To Build Good Software vs. Learn a Technology</title>
		<link>https://codingculture.io/2017/09/23/how-to-build-good-software-vs-learn-a-technology/</link>
		<pubDate>Sat, 23 Sep 2017 19:46:36 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=487</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The Problem</h2>

Go find any "learn X in 21 days", “X boot camp” training material and look at how it treats Technology X.

Go to the Angular or React or Aurelia or VueJS or EmberJS site and do the QuickStart tutorial on it. Look at the way the technology is presented to you.

<blockquote><em>We continually teach developers who are hungry to learn new technology how to use it <strong>in a way that tightly couples them to it</strong>.</em></blockquote>

We are encouraging new developers to tightly couple in one breath and then complaining about the “churn” in web technology frameworks in the next.

I think we can do better.

<h2>The Symptom</h2>

Consider a React component that is a simple RPN calculator, here is some of the code (sorry for the bad JSX formatting):

<pre class="lang:js mark:8-10,14,20,28-31,33-34,36,43-70,72 decode:true ">class Calculator extends React.Component {
  constructor() {
    super();
    this.state = {error: false, values: [], input: ''};
    this.inputDidChange = this.inputDidChange.bind(this);
  }

  get operations() {
    return [ '+', '-', '*', '/' ];
  }

  userDidPressEnter() {
    if (this.state.error) return;
    this.addToValuesIfNumeric(this.state.input);
    this.setState({input: ''});
  }

  userDidPressOperator(op) {
    if (this.state.error) return;
    this.addToValues(op);
    this.calculate();
  }

  userDidPressClear() {
    this.setState({values: [], error: false});
  }

  addToValuesIfNumeric(input) {
    let value = parseFloat(input);
    if (!isNaN(value)) this.addToValues(value);
  }

  addToValues(value) {
    this.state.values.push(value);
    this.setState({values: this.state.values});
  }

  inputDidChange(event) {
    let newValue = event.target.value.replace(/[^0-9\.]/g, '');
    this.setState({input: newValue});
  }

  calculate() {
    let stack = [];
    this.state.values.forEach(el =&gt; {
      if (typeof(el) === 'number') stack.push(el);
      else {
        let b = stack.pop();
        let a = stack.pop();
        if (typeof(a) === 'undefined' || typeof(b) === 'undefined') {
          this.setState({error: true});
        } else {
          switch(el) {
            case '+':
              stack.push(a + b);
              break;
            case '-':
              stack.push(a - b);
              break;
            case '/':
              stack.push(a / b);
              break;
            case '*':
              stack.push(a * b);
              break;
          }
        }
      }
    });

    this.setState({values: stack});
  }

  statusClass() {
    return this.state.error ? 'error' : '';
  }

  render() {
    return (
      &lt;section className="calculator"&gt;
          &lt;ol className={this.statusClass()}&gt;
            {this.state.values.map(v =&gt; &lt;li&gt;{v}&lt;/li&gt;)}
          &lt;/ol&gt;
        &lt;section className="input"&gt;
          &lt;input type="text" value={this.state.input}
                 placeholder="Click to type a number"
                 onChange={this.inputDidChange}&gt;&lt;/input&gt;
          &lt;button onClick={() =&gt; this.userDidPressEnter()}&gt;Enter&lt;/button&gt;
        &lt;/section&gt;
        &lt;ul&gt;
          {this.operations.map(op =&gt; {
            return &lt;li&gt;
              &lt;button
                onClick={() =&gt; this.userDidPressOperator(op)}&gt;{op}&lt;/button&gt;
            &lt;/li&gt;;
          })}
          &lt;li&gt;
            &lt;button onClick={() =&gt; this.userDidPressClear()}&gt;Clear&lt;/button&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/section&gt;
    );
  }
}

ReactDOM.render(&lt;Calculator/&gt;, document.getElementById('app'));
</pre>

<h2>Cleaning Up</h2>

Now let’s thin this component out to just the React code that delegates to an extracted RPN implementation:

<pre class="lang:js mark:1-52,57,64,71 decode:true ">class RPN {
  constructor() {
    this.values = [];
  }

  get operations() {
    return [ '+', '-', '*', '/' ];
  }

  addToValuesIfNumeric(input) {
    let value = parseFloat(input);
    if (!isNaN(value)) this.addToValues(value);
  }

  addToValues(value) {
    this.values.push(value);
    this.calculate();
  }

  calculate() {
    console.log(this.values);
    let stack = [];
    this.values.forEach(el =&gt; {
      if (typeof(el) === 'number') stack.push(el);
      else {
        let b = stack.pop();
        let a = stack.pop();
        if (typeof(a) === 'undefined' || typeof(b) === 'undefined') {
          throw("too few operands");
        } else {
          switch(el) {
            case '+':
              stack.push(a + b);
              break;
            case '-':
              stack.push(a - b);
              break;
            case '/':
              stack.push(a / b);
              break;
            case '*':
              stack.push(a * b);
              break;
          }
        }
      }
    });

    this.values = stack;
  }

}

class Calculator extends React.Component {
  constructor() {
    super();
    this.rpn = new RPN();
    this.state = {error: false, values: [], input: ''};
    this.inputDidChange = this.inputDidChange.bind(this);
  }

  userDidPressEnter() {
    if (this.state.error) return;
    this.rpn.addToValuesIfNumeric(this.state.input);
    this.setState({input: '', values: this.rpn.values});
  }

  userDidPressOperator(op) {
    if (this.state.error) return;
    try {
      this.rpn.addToValues(op);
      this.setState({values: this.rpn.values});
    } catch(err) {
      this.setState({error: true});
    }
  }

  userDidPressClear() {
    this.setState({values: [], error: false});
  }

  inputDidChange(event) {
    let newValue = event.target.value.replace(/[^0-9\.]/g, '');
    this.setState({input: newValue});
  }

  statusClass() {
    return this.state.error ? 'error' : '';
  }

  render() {
    return (
      &lt;section className="calculator"&gt;
          &lt;ol className={this.statusClass()}&gt;
            {this.state.values.map(v =&gt; &lt;li&gt;{v}&lt;/li&gt;)}
          &lt;/ol&gt;
        &lt;section className="input"&gt;
          &lt;input type="text" value={this.state.input}
                 placeholder="Click to type a number"
                 onChange={this.inputDidChange}&gt;&lt;/input&gt;
          &lt;button onClick={() =&gt; this.userDidPressEnter()}&gt;Enter&lt;/button&gt;
        &lt;/section&gt;
        &lt;ul&gt;
          {this.rpn.operations.map(op =&gt; {
            return &lt;li&gt;
              &lt;button
                onClick={() =&gt; this.userDidPressOperator(op)}&gt;{op}&lt;/button&gt;
            &lt;/li&gt;;
          })}
          &lt;li&gt;
            &lt;button onClick={() =&gt; this.userDidPressClear()}&gt;Clear&lt;/button&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/section&gt;
    );
  }
}

ReactDOM.render(&lt;Calculator/&gt;, document.getElementById('app'));</pre>

Look at how it has become clearer, the boundaries between what is React specific and what is application logic?

Now, if we know what the RPN class does, and we just want to learn how to use React, we can shorten the example to just:

<pre class="lang:js decode:true ">class Calculator extends React.Component {
  constructor() {
    super();
    this.rpn = new RPN();
    this.state = {error: false, values: [], input: ''};
    this.inputDidChange = this.inputDidChange.bind(this);
  }

  userDidPressEnter() {
    if (this.state.error) return;
    this.rpn.addToValuesIfNumeric(this.state.input);
    this.setState({input: '', values: this.rpn.values});
  }

  userDidPressOperator(op) {
    if (this.state.error) return;
    try {
      this.rpn.addToValues(op);
      this.setState({values: this.rpn.values});
    } catch(err) {
      this.setState({error: true});
    }
  }

  userDidPressClear() {
    this.setState({values: [], error: false});
  }

  inputDidChange(event) {
    let newValue = event.target.value.replace(/[^0-9\.]/g, '');
    this.setState({input: newValue});
  }

  statusClass() {
    return this.state.error ? 'error' : '';
  }

  render() {
    return (
      &lt;section className="calculator"&gt;
          &lt;ol className={this.statusClass()}&gt;
            {this.state.values.map(v =&gt; &lt;li&gt;{v}&lt;/li&gt;)}
          &lt;/ol&gt;
        &lt;section className="input"&gt;
          &lt;input type="text" value={this.state.input}
                 placeholder="Click to type a number"
                 onChange={this.inputDidChange}&gt;&lt;/input&gt;
          &lt;button onClick={() =&gt; this.userDidPressEnter()}&gt;Enter&lt;/button&gt;
        &lt;/section&gt;
        &lt;ul&gt;
          {this.rpn.operations.map(op =&gt; {
            return &lt;li&gt;
              &lt;button
                onClick={() =&gt; this.userDidPressOperator(op)}&gt;{op}&lt;/button&gt;
            &lt;/li&gt;;
          })}
          &lt;li&gt;
            &lt;button onClick={() =&gt; this.userDidPressClear()}&gt;Clear&lt;/button&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/section&gt;
    );
  }
}
</pre>

<h2>Beyond The Trivial</h2>

Think about how useless most contrived examples are. How many frameworks and platforms have you implemented that “hello world” style todo list upon. It doesn’t take too many years in this field until you’ve done dozens.

Then, when you try to go further past the tutorial you inevitably hit the rough edges that they had no way to cover in the trivial example. Your real world code raises questions for which you weren't prepared. It pushes on your newly forming mental model of the new technology, and things get confused.

So use plain Javascript to go beyond the trivial. Tuck that code away somewhere, because it's mostly irrelevant. Build out as much as you want. Students only have to casually understand its flow. My RPN example isn't much past trivial, but I think it still shows the point.

You'll have to spend some time explaining the example, but honestly if you're talking to a JavaScript developer, regardless of what framework they want to use, it ought to make sense to them.

I think there are several advantages to this approach:

<ul>
    <li>it will focus students on the technology</li>
    <li>you can use the same model to teach several technologies</li>
    <li>you will both learn how to build and teach code that survives shifting idioms (ie reactive versus bound property approaches)</li>
    <li>you will stop having to oversimplify domains so that the application code doesn’t outnumber the framework specific code, lets use some more realistic scenarios rather than just todo list</li>
</ul>

What do you think?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date><![CDATA[2017-09-23 19:46:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-23 19:46:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-build-good-software-vs-learn-a-technology]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dev"><![CDATA[Developer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[498]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Pair Chain Exercise</title>
		<link>https://codingculture.io/2017/10/01/pair-chain-exercise/</link>
		<pubDate>Sun, 01 Oct 2017 13:06:09 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[When I facilitate a kata session with a group of developers, sometimes I like to mix it up a little. If the room feels like it’s getting a little bored of a format, or if it’s a sunny Friday afternoon and everyone’s anticipating the weekend, I like to raise the energy level up a little.

In my experience, this exercise works well with 5-15 participants.

<blockquote>Timeframe: <strong>60m total - 45-50m exercise, 10-15m retrospective
</strong>Group Size: <strong>5-15 participants
</strong>Room Setup: <strong>Single computer on projector at front of room, IDE loaded and ready with empty or template project</strong><strong>
</strong></blockquote>

Choose a moderate code kata like Bowling or Gilded Rose. FizzBuzz is too simple, we want to stress both solving the problem as well as the approach to solving the problem.

Start with a pair, pilot and co-pilot on the projector beginning the problem.

Every 2 minutes, the pilot leaves the computer, the co-pilot takes over the pilot chair, and a new co-pilot goes up to the front. Rotate through the room in the same order so that every person spends some time at the keyboard, many times.

As the facilitator, you should focus more on room dynamics than prompting constraints or hinting at a solution path (the room chaos should be constraint enough). Call out when someone could look something up, when the pair has 10 seconds left, when a whiteboard diagram might be helpful (the room might do it while the pair codes, or the pair can do it if it’s an impediment).

This should make for a fast-paced and fun session! Hopefully you’re going to see some laughing, lots of unfinished thoughts, the room directing novice developers what to type, some disagreements on approach, and a generally messy room for the duration of the session.

I’ve seen a few interesting dynamics surface during these sessions:

<ul>
    <li>sometimes a pair may choose not to code, and use a whiteboard instead to work out a problem, or sketch a path</li>
    <li>sometimes performance anxiety takes hold and folks who feel like they fumble at the keyboard sometimes get to watch their mentors fumble too, use this opportunity to raise the visibility of feelings like safety, forgiveness, humility</li>
    <li>the time that any “code heros” have at the keyboard is extremely limited, so this should minimize their dominance over the solution, encourage them to support the team</li>
    <li>try and keep the room focused on what’s going on at the front, gently discourage side conversations and try to bring them out to the room</li>
    <li>sometimes someone will open their laptop and do a bit of “research” on solving the problem, encourage a pair to spend a cycle pulling up that page and discussing what’s there (like a micro-spike), or encourage room discussion around the item</li>
    <li>depending on the mix of folks in the room, see if you can identify the folks that zone in alone on a problem, the folks that pair up or group-think a problem</li>
    <li>watch for developers getting up and “undoing” a bunch of previous work, try to encourage “one way flow” along a path towards a solution</li>
</ul>

Take note of the patterns you see and any notable aspects of the room dynamics for the retrospective.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date><![CDATA[2017-10-01 13:06:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-01 13:06:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pair-chain-exercise]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="coach"><![CDATA[Coaches]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267542]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_36302]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267557]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267559]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[my-fishbowl-group-kata-exercise]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Group Kata Facilitation</title>
		<link>https://codingculture.io/2017/10/01/group-kata-facilitation/</link>
		<pubDate>Sun, 01 Oct 2017 15:56:26 +0000</pubDate>
		<dc:creator><![CDATA[svetzal]]></dc:creator>
		<guid isPermaLink="false">https://codingculture.io/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[This is my fall-back group format when facilitating kata.

<blockquote>Timeframe: <strong>60m total - 45-50m exercise, 10-15m retrospective</strong>
Group Size: <strong>6-16 participants (3-8 pairs)</strong>
Room Setup: <strong>one laptop per pair, optional projector or TV for kata description</strong></blockquote>

<h2>Choosing a Kata</h2>

Choose your kata ahead of time, and come in prepared with it. A projector or TV with the kata description shown throughout the session can be a helpful reference. My favourite place for kata ideas is Dave Thomas' <a href="http://codekata.com">CodeKata</a> site.

There are some helpful technologies out there too, if the team wants to explore a new programming language or test framework then <a href="http://cyber-dojo.org">cyber-dojo</a> is a great zero-setup web based environment with which to start. <em>If you're doing this within an organization, I recommend supporting the <a href="http://blog.cyber-dojo.org/2015/08/cyber-dojo-foundation.html">cyber-dojo Foundation</a> who assembled and maintain the technologies.</em>

Any kata will do, though when starting a practice regime with a team <a href="https://codingculture.io/2017/05/13/worthiness-fizzbuzz-kata/">I like to focus on simpler code katas like Fizzbuzz</a>. I find it useful to start from a baseline, uncover some assumptions, and help the pairs focus on their approach rather than solving a puzzle.

<h2>Choosing a Theme</h2>

You may optionally choose a theme to explore with the kata. You could do this with a constraint, or you might launch a language exploration (having Javascript developers explore ES6 constructs like Promises), really this can be any behaviour you're trying to encourage within your actual projects that you feel could use some practice.

Write the theme up on a whiteboard or easel for everyone to see during the session.

Some themes I've used:

<ul>
    <li>Talk to each other (new to pairing, sometimes being reminded of the basics helps)</li>
    <li>Test first (for teams struggling to make this a regular practice)</li>
    <li>Functional core, imperative shell (HT to Gary Bernhardt and his <a href="https://www.destroyallsoftware.com/talks/boundaries">Boundaries</a> talk)</li>
    <li>Javascript: Promises are your friend, Async / await, Generators (wherever they're struggling)</li>
    <li>(lots more I could put here...)</li>
</ul>

<h2>Exploring The Edges with Constraints</h2>

Simpler exercises like Fizzbuzz often get solved quickly, and adding constraints to either the whole room (if everyone's about on the same level) or to a pair (if they're significantly ahead) can help slow them down and widen their skills.

<h3>Language / Idiom Exploration</h3>

<h4>No Ifs (Level 1)</h4>

Removing "if" statements can be a first step towards pushing towards polymorphic or dynamic solutions, and will often settle folks into using clever ternary operators.

<h4>No Conditionals (Level 2)</h4>

This will push folks more cleanly into polymorphic or dynamic solutions, if people balk at this, have them do No Ifs first.

<h4>No Primitives</h4>

This will encourage folks to gather state together in structures, look for and encourage cohesive structures as you wander the room. They may even begin to add behaviour to those structures, and that's a great place for a conversation around functional versus imperative code.

<h4>No Methods / Functions &gt; 3 Lines</h4>

This is a great way to practice refactoring as you go, and to practice naming things as you extract.

<h4>No Mutations / No Assignments</h4>

A significant class of bugs arise from unexpected mutations in data structures and classes, so this is a great way to explore how to build using pure functional idioms.

<h4>No Loops</h4>

Recursion can be a handy way of tackling some problems, but loops tend to be the go-to structure for many developers. Help them think beyond the loop.

<h3>Kinesthetics / Ergonomics / Environmental</h3>

<h4>No IDE</h4>

Folks can become too dependent on auto-completion technologies, so taking them out of their IDE pushes them to use other ways of looking up references. Sometimes a quick peek at that long forgotten documentation can be a chance for discovery.

<h4>No Mouse</h4>

Sometimes we get a little too comfortable with the mouse, and forget about how much it slows us down when we have a job to do. Our text editors and IDEs are full of handy keyboard shortcuts for changing and navigating our code.

<h3>Pair Dynamics</h3>

<h4>Ping Pong</h4>

Often the default thing you want to do once you start encouraging pairing. Before pairs figure out their best dynamics, this starting point can get them thinking about the TDD cycle.

One of the pair writes a test, and the other makes it pass and refactors it to be clean. Then the other writes the next test and the first makes it pass and makes it clean. The keyboard is shifted regularly between the pair, like a ping-pong ball, with each cycle.

<h4>Evil Pair</h4>

This is very much like Ping Pong, however when the developer makes the test pass they do so in a way that is counter to the solution they're seeking. It's fun to see a passing test suite in a solution that does nothing at all like it's supposed to.

Warning: This will stress folks' creativity, and can lead to much laughter!

<h4>Golf</h4>

While doing Ping Pong, count the number of keystrokes typed to pass a test. Who got the lowest score?

<h4>Kata Chain</h4>

<a href="https://codingculture.io/2017/10/01/my-fishbowl-group-kata-exercise/">A group kata exercise, described here</a>.

<h2>During The Kata</h2>

Wander the room with the developers, and swoop in and out of what they're doing.

Ergonomics checks:

<ul>
    <li>are they talking to each other?</li>
    <li>are they passing the keyboard back and forth?</li>
    <li>are they taking care to ensure both can see the screen as they work?</li>
</ul>

Code checks:

<ul>
    <li>if you established constraints for the kata, how are they coping?</li>
    <li>if you established a theme for the kata, are they following it / do they understand it?</li>
    <li>how's their TDD cycle length? (you want short 3-5 minute cycles)</li>
    <li>if they're progressing to quickly to the solution, introduce a constraint</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2017-10-01 15:56:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-01 15:56:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[group-kata-facilitation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="coach"><![CDATA[Coaches]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[inline_featured_image]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_before]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[hefo_after]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@mojility]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267542]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_36302]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267557]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_11267559]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[group-kata-exercise]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	
<!--
Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

Object Caching 35/134 objects using disk
Page Caching using disk: enhanced{w3tc_pagecache_reject_reason}
Content Delivery Network via Amazon Web Services: CloudFront: cdn1.codingculture.io (wp-admin)
Minified using disk (wp-admin)
Database Caching using disk (Request-wide modification query)

Served from: codemanship.ca @ 2019-09-08 19:15:50 by W3 Total Cache
-->